// Mocks generated by Mockito 5.4.5 from annotations
// in empty_flutter_template/test/core/services/merge_service_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:empty_flutter_template/core/placeholders/placeholder_loader_service.dart'
    as _i11;
import 'package:empty_flutter_template/core/utils/rss_service.dart' as _i9;
import 'package:empty_flutter_template/data/repositories/podcast_repository.dart'
    as _i5;
import 'package:empty_flutter_template/domain/common/api_response.dart' as _i2;
import 'package:empty_flutter_template/domain/models/host_model.dart' as _i3;
import 'package:empty_flutter_template/domain/models/merge_models.dart' as _i4;
import 'package:empty_flutter_template/domain/models/podcast_collection_model.dart'
    as _i7;
import 'package:empty_flutter_template/domain/models/podcast_episode_model.dart'
    as _i8;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiResponse_0<T> extends _i1.SmartFake
    implements _i2.ApiResponse<T> {
  _FakeApiResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHost_1 extends _i1.SmartFake implements _i3.Host {
  _FakeHost_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalJsonData_2 extends _i1.SmartFake implements _i4.LocalJsonData {
  _FakeLocalJsonData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PodcastRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPodcastRepository extends _i1.Mock implements _i5.PodcastRepository {
  MockPodcastRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.ApiResponse<_i7.PodcastCollection>> fetchPodcastCollection({
    int? limit,
    String? country,
    String? entity,
    String? media,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPodcastCollection,
          [],
          {
            #limit: limit,
            #country: country,
            #entity: entity,
            #media: media,
          },
        ),
        returnValue: _i6.Future<_i2.ApiResponse<_i7.PodcastCollection>>.value(
            _FakeApiResponse_0<_i7.PodcastCollection>(
          this,
          Invocation.method(
            #fetchPodcastCollection,
            [],
            {
              #limit: limit,
              #country: country,
              #entity: entity,
              #media: media,
            },
          ),
        )),
      ) as _i6.Future<_i2.ApiResponse<_i7.PodcastCollection>>);

  @override
  _i6.Future<_i2.ApiResponse<List<_i8.PodcastEpisode>>> fetchPodcastEpisodes(
    int? collectionId, {
    int? limit,
    String? country,
    String? entity,
    String? media,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPodcastEpisodes,
          [collectionId],
          {
            #limit: limit,
            #country: country,
            #entity: entity,
            #media: media,
          },
        ),
        returnValue:
            _i6.Future<_i2.ApiResponse<List<_i8.PodcastEpisode>>>.value(
                _FakeApiResponse_0<List<_i8.PodcastEpisode>>(
          this,
          Invocation.method(
            #fetchPodcastEpisodes,
            [collectionId],
            {
              #limit: limit,
              #country: country,
              #entity: entity,
              #media: media,
            },
          ),
        )),
      ) as _i6.Future<_i2.ApiResponse<List<_i8.PodcastEpisode>>>);

  @override
  _i6.Future<_i2.ApiResponse<_i7.PodcastCollection>> fetchPodcastCollectionById(
    int? id, {
    int? limit,
    String? country,
    String? entity,
    String? media,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPodcastCollectionById,
          [id],
          {
            #limit: limit,
            #country: country,
            #entity: entity,
            #media: media,
          },
        ),
        returnValue: _i6.Future<_i2.ApiResponse<_i7.PodcastCollection>>.value(
            _FakeApiResponse_0<_i7.PodcastCollection>(
          this,
          Invocation.method(
            #fetchPodcastCollectionById,
            [id],
            {
              #limit: limit,
              #country: country,
              #entity: entity,
              #media: media,
            },
          ),
        )),
      ) as _i6.Future<_i2.ApiResponse<_i7.PodcastCollection>>);
}

/// A class which mocks [RssService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRssService extends _i1.Mock implements _i9.RssService {
  MockRssService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.Host> fetchHostFromFeed(String? rssUrl) => (super.noSuchMethod(
        Invocation.method(
          #fetchHostFromFeed,
          [rssUrl],
        ),
        returnValue: _i6.Future<_i3.Host>.value(_FakeHost_1(
          this,
          Invocation.method(
            #fetchHostFromFeed,
            [rssUrl],
          ),
        )),
      ) as _i6.Future<_i3.Host>);

  @override
  _i6.Future<_i3.Host> fetchHostUsingCollectionId(_i10.Ref<Object?>? ref) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchHostUsingCollectionId,
          [ref],
        ),
        returnValue: _i6.Future<_i3.Host>.value(_FakeHost_1(
          this,
          Invocation.method(
            #fetchHostUsingCollectionId,
            [ref],
          ),
        )),
      ) as _i6.Future<_i3.Host>);

  @override
  _i6.Future<_i3.Host> fetchHostFromCollectionId(int? collectionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchHostFromCollectionId,
          [collectionId],
        ),
        returnValue: _i6.Future<_i3.Host>.value(_FakeHost_1(
          this,
          Invocation.method(
            #fetchHostFromCollectionId,
            [collectionId],
          ),
        )),
      ) as _i6.Future<_i3.Host>);

  @override
  _i6.Future<_i4.RssData?> fetchRssData(String? feedUrl) => (super.noSuchMethod(
        Invocation.method(
          #fetchRssData,
          [feedUrl],
        ),
        returnValue: _i6.Future<_i4.RssData?>.value(),
      ) as _i6.Future<_i4.RssData?>);
}

/// A class which mocks [PlaceholderLoaderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlaceholderLoaderService extends _i1.Mock
    implements _i11.PlaceholderLoaderService {
  MockPlaceholderLoaderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.LocalJsonData> loadLocalJsonData(int? collectionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadLocalJsonData,
          [collectionId],
        ),
        returnValue: _i6.Future<_i4.LocalJsonData>.value(_FakeLocalJsonData_2(
          this,
          Invocation.method(
            #loadLocalJsonData,
            [collectionId],
          ),
        )),
      ) as _i6.Future<_i4.LocalJsonData>);
}
